#!/bin/bash

MIN_MRNA_SIZE=30;	#min number of mRNA nucleotides
MAX_MRNA_SIZE=55;	#same, but max

if [ $# -ne 4 ]
then
  echo -e "\n\n\nTo run MiRNA target site identification 4 parameters  are needed:"
  echo "- file with miRNA expression values (relative proportion among miRNAs in the"
  echo "  sample of interest) : miRNA_expression"
  echo "- FastA file of the miRNA sequences (standardized to 21 nucleotides in"
  echo "  length) : miRNA_sequence"
  echo "  NB: sequences longer than 21 will be trimmed, sequences shorter than 21"
  echo "  will be discarded."
  echo "- FastA file of the mRNA fragments : mRNA_sequence (the sequences in this file"
  echo "  must be between $MIN_MRNA_SIZE and $MAX_MRNA_SIZE nucleotides long and all of the same length)"
  echo -e "- option for updating the priors: this is \"update\" or \"noupdate\"\n"
  echo "N.B.: With an input of 500 miRNAs sequences and 5000 mRNA sequences"
  echo -e "  the computation takes ca. 5 minutes.\n"
  echo -e "\nPlease launch miRNA target site identification from the directory in which"
  echo -e "  it has been installed.\n\n"
else

  WORKPATH=`pwd`
  export LD_LIBRARY_PATH=$WORKPATH/libs/o2scl/lib:$LD_LIBRARY_PATH
  export LD_LIBRARY_PATH=$WORKPATH/libs/gsl/lib:$LD_LIBRARY_PATH

  OUTPUT=$WORKPATH/results/output
  CHECK=$WORKPATH/results/check
  HYBRIDS=$WORKPATH/results/hybrids
  ACTIVITY=$WORKPATH/results/miRNA_Activity
  INPUTS=$WORKPATH/results/inputs
  CANONICAL=$WORKPATH/results/canonical
  NON_CANONICAL=$WORKPATH/results/non_canonical
  PVALUE=$WORKPATH/results/p-value
  ENRICHMENT=$WORKPATH/results/enrichment
  CANONICAL_PE=$WORKPATH/results/canonical_p_e
  BEST_RESULTS=$WORKPATH/results/best_results.html
  echo -e "\nNow parsing input files.."

  MRNALENGTH=0;
  MIRNAEXP=$1
  MIRNASEQ=$2
  MRNAFILE=$3		#mRNA file
  UPDATEPRIORS=$4	#update or not the priors
  MIRNAPARSEDEXP=$WORKPATH/exp
  MIRNAPARSEDSEQ=$WORKPATH/seq

  #parse the mRNA input file and check if all the entries have the same number of nucleotides
  i=0
  h=0
  c=0
  for line in `cat "$MRNAFILE"`; do
    let "c=c+1"
    if [ $i -eq 0 ]; then		#discard the odd lines
      i=1
    else
      if [ $h -eq 0 ]; then		#get the length of the 2nd line
        MRNALENGTH=`expr length "$line"`
        h=1
	if [ $MRNALENGTH -lt $MIN_MRNA_SIZE ] || [ $MRNALENGTH -gt $MAX_MRNA_SIZE ]; then
	  echo -e "\n\nERROR the mRNA sequences should contain between 45 and 55 nucleotides\n\n"
	  exit
	fi
      fi
        linelenght=`expr length "$line"` #get the length of the even lines
        if [ $linelenght -ne $MRNALENGTH ]; then #compare it to the length of the second line
          echo -e "\n\nERROR on line $c in file $MRNAFILE: All lines should have the same number of nucleotides.\n\n"
          exit
        fi
        i=0
      fi
  done

  #parse the miRNA files and make sure there is an entry in the expression file for each entry in the sequence file,
  #and vice versa. If not, remove those entries.
  $WORKPATH/bin/parser.sh $WORKPATH $MIRNAEXP $MIRNASEQ $MIRNAPARSEDEXP $MIRNAPARSEDSEQ

  echo -e "Starting computations with mRNA fragmants of length $MRNALENGTH"
  $WORKPATH/bin/MIRZA $WORKPATH/exp $MRNAFILE $WORKPATH/seq $MRNALENGTH $UPDATEPRIORS > $OUTPUT
  echo -e "Processing completed."
  echo -e "Now parsing.."

  cat $OUTPUT | grep -P "^likelihood ratio of mRNA \(" |perl -e 'while(<>){chomp;@d=split(/\s+/);print join("\t",$d[4],$d[5],$d[8],$d[9],$d[11],1*$d[13],1*$d[15])."\n";}'|sort -g -k +6 -r > $CHECK
  cat $OUTPUT | grep -P "^########" -A +4 |grep -v -P "^########"| grep -v -P "^\-\-" > $HYBRIDS
  cat $OUTPUT | grep -P "miRNA\sprior\s\S+\s\>\S+\s\S+$" |perl -e 'while(<>){chomp;@d=split(/\s+/);if($d[2] eq "BEFORE"){$B{$d[3]}=$d[4];}else{$A{$d[3]}=$d[4];}}print join("\t", "miRNA", "Initial Prior", "Updated Prior")."\n"; foreach $miRNA (sort {$A{$b}<=>$A{$a}} keys %A){ print join("\t",$miRNA,$B{$miRNA},$A{$miRNA})."\n";}' > $ACTIVITY
  echo -e "Parsing completed."
  echo -e "Now creating html files.."
  if [ $UPDATEPRIORS != "update" ] && [ $UPDATEPRIORS != "noupdate" ]; then	#if the 4th input option is not correctly spelled
    echo -e "\n\nERROR: the 4th paramenter of lauch_MIRZA should be either \"update\" or \"noupdate\".\n\n"
  else
    if [ $UPDATEPRIORS = "update" ]; then					#if it is "update"
      $WORKPATH/bin/make_html_update.pl $CHECK $HYBRIDS 2> $INPUTS
    fi
    if [ $UPDATEPRIORS = "noupdate" ]; then					#if it is "noupdate"
      $WORKPATH/bin/make_html_noupdate.pl $CHECK $HYBRIDS 2> $INPUTS
    fi

    rm $CHECK
    rm $MIRNAPARSEDEXP
    rm $MIRNAPARSEDSEQ
    cat $INPUTS |grep -P "^NON_CANONICAL" > $NON_CANONICAL
    cat $INPUTS |grep -P "^CANONICAL" > $CANONICAL
    cp $WORKPATH/bin/sorttable.js $WORKPATH/results/
    rm $INPUTS
    rm $OUTPUT
    #  less $CANONICAL |awk -F "\t" '{print $8}'|awk -F "|" '{print $4}'|less > $PVALUE
    #  less $CANONICAL |awk -F "\t" '{print $8}'|awk -F "|" '{print $5}'|less > $ENRICHMENT
    #  paste $CANONICAL $PVALUE $ENRICHMENT > $CANONICAL_PE
    echo -e "\nAll done!"
    echo -e "These files were created:\n"
    echo "$HYBRIDS"
    echo "$CANONICAL"
    echo "$NON_CANONICAL"
    echo "$BEST_RESULTS"
    echo -e "$ACTIVITY\n"
  fi
fi


